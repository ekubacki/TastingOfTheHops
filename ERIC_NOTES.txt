/*

======================================================================
//sign-up
HTTP-Verb: POST
content-type : application/json

http://localhost:8080/TastingOfTheHops/account/signup

Example Request Json:
{
  "firstName": "Eric",
  "lastName" : "Kubacki"
}

{
  "firstName": "Eric",
  "lastName" : "Kubacki",
  "email" : "ejkubacki@gmail.com",

  "beers" : [
    {
      "name" : "The Good Stuff",
      "brewery" : "This is a test brewery"
	}, {
		"name" : "The Good Stuff part 2",
		"brewery" : "this is a test brewery"
	}
  ]
}

Example Response Json:
{
    "code": 200,
    "accountId": "80a1f0a9-c07d-451d-91d1-d804501ac646",
    "payload": null
}


Example Error Responses:
{
    "code": 409,
    "accountId": null,
    "payload": "This account already exists: Eric Kubacki"
}
{
    "code": 400,
    "accountId": null,
    "payload": "Must have a value for first name"
}
{
    "code": 400,
    "accountId": null,
    "payload": "Must have a value for last name"
}
{
    "code": 400,
    "accountId": null,
    "payload": "Must have a value for brewery"
}
{
    "code": 400,
    "accountId": null,
    "payload": "Must have a value for beer"
}
======================================================================
//find user
HTTP-Verb: POST
content-type : application/json

http://localhost:8080/TastingOfTheHops/account/find

Example Request Json:
{
  "firstName": "Eric",
  "lastName" : "Kubacki"
}
{
  "email": "ejkubacki@gmail.com"
}
{
  "firstName": "Eric",
  "lastName" : "Kubacki",
  "email": "ejkubacki@gmail.com"
}

Example Response Json:
{
    "code": 200,
    "firstName": "Eric",
    "lastName": "Kubacki",
    "email": "ejkubacki@gmail.com",
    "id": "80a1f0a9-c07d-451d-91d1-d804501ac646",
    "payload": null
}
{
    "code": 404,
    "firstName": null,
    "lastName": null,
    "email": null,
    "id": null,
    "payload": "The account was not found"
}

======================================================================
//get tastings
HTTP-Verb: POST
content-type : application/json

http://localhost:8080/TastingOfTheHops/tasting/tastings

Example Response Json:
{
    "code": 200,
    "tastingsResponse": [
        {
            "displayNames": [
                "Eric Kubacki"
            ],
            "beerName": "The Good Stuff",
            "brewery": "This is a test brewery",
            "rating": null
        },
        {
            "displayNames": [
                "Eric Kubacki"
            ],
            "beerName": "The Good Stuff part 2",
            "brewery": "this is a test brewery",
            "rating": null
        }
    ],
    "payload": null
}




======================================================================
//get tasting lineup
HTTP-Verb: POST
content-type : application/json

http://localhost:8080/TastingOfTheHops/tasting/lineup

Example Response Json:
{
    "code": 200,
    "tastingsResponse": [
        {
            "displayNames": [
                "Eric Kubacki"
            ],
            "beerName": "The Good Stuff",
            "brewery": "This is a test brewery",
            "rating": null
        },
        {
            "displayNames": [
                "Eric Kubacki"
            ],
            "beerName": "The Good Stuff part 2",
            "brewery": "this is a test brewery",
            "rating": null
        }
    ],
    "payload": null
}
======================================================================



/*
drop table accounts;
drop table beers;
drop table tastings;
drop table lineup;
drop table ratings;


    CREATE TABLE IF NOT EXISTS accounts (
        account_id VARCHAR(50) NOT NULL,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR(50) NOT NULL,
        email VARCHAR(50),
        CONSTRAINT pk_accounts PRIMARY KEY (account_id),
        UNIQUE KEY accounts_unique_index (first_name, last_name)
    );

    CREATE TABLE IF NOT EXISTS beers (
        beer_id VARCHAR(50) NOT NULL,
        name VARCHAR(50) NOT NULL,
        brewery VARCHAR(50) NOT NULL,
        CONSTRAINT pk_beers PRIMARY KEY (beer_id),
        UNIQUE KEY beers_unique_index (name, brewery)
    );

    CREATE TABLE IF NOT EXISTS tastings (
        beer_id VARCHAR(50) NOT NULL,
        account_id VARCHAR(50) NOT NULL,
        year int NOT NULL,
        tasted boolean NOT NULL,
        rating int NOT NULL
    );

    CREATE TABLE IF NOT EXISTS lineup (
        beer_id VARCHAR(50) NOT NULL       // this really should be declared as a foreign key
    );

    CREATE TABLE IF NOT EXISTS ratings (
        account_id VARCHAR(50) NOT NULL,
        beer_id VARCHAR(50) NOT NULL,
        year int NOT NULL,
        rating int NOT NULL,
        CONSTRAINT pk_ratings PRIMARY KEY (account_id, beer_id, year)
    );

select * from accounts;
select * from beers;
select * from tastings;
select * from ratings;
select * from tastings order by rand();
select avg(cast(rating as Float)) from ratings  where beer_id = ? and year = ?
*/



// go look at this: https://www.npmjs.com/package/beeradvocate-api
// need to add an api that if a user is found and they are only adding a beer
// create api to "find" a beer -> look at integrating this with beeradvocate-api
// determine agreement about character case senstivity
